class util
{
	public boolean existSum(int[] a, int s)
	{
		int[] n = Sort(a);
		int start = 0, end = n.length-1;
		int temp;
		do
		{
			temp = n[start]+n[end];
			if(temp<s) start++;
			if(temp>s) end--;
			if(temp == s) break;
			
		}while(end-start != 1);
		return temp == s;
	}
	
	public int[] Sort(int[] numbers) 
	{
		int[] minMax = GetMinMax(numbers);
		int max = minMax[1];
		int min = minMax[0];
		int[] sorted = new int[numbers.length];
		int[][] traces = new int[max-min+1][1];
		
		for (int i = 0; i < numbers.length; i++)
			traces[numbers[i]-min][0]++;
		
		int sum = traces[0][0];
		for (int i = 1; i < traces.length; i++)
		{
			traces[i][0]+=sum;
			sum = traces[i][0];
		}
		
		for (int i = 0; i < numbers.length; i++) 
		{
			sorted[traces[numbers[i]-min][0]-1] = numbers[i];
			traces[numbers[i]-min][0]--;
		}
		return sorted;
	}
	
	private int[] GetMinMax(int[] numbers)
	{
		int max = Integer.MIN_VALUE;
		int min = Integer.MAX_VALUE;
		for (int i = 0; i < numbers.length; i++)
		{	
			if(numbers[i]>max) max = numbers[i];
			if(numbers[i]<min) min = numbers[i];
		}
		return new int[] {min, max};
	}
}

//Test
Dump(new util().existSum(new int[]{1,2,6,4,5,7}, 10));
Dump(new util().existSum(new int[]{6,1,2,3,4,5}, 12));

	